#!/usr/bin/env python
"""EBS PIN v2"""

import click
import click_log
import logging
log = logging.getLogger(__name__)
click_log.basic_config(log)
import sys, os
import yaml
import uuid
import requests
from ebspin.ebs_manager import EBSManager, EBS_PIN_ID, DEVICE, MOUNT_DIR, VIRTUAL_DEVICE
import yaml

class EBSPINConfigException(Exception):
    pass

def get_manager(config_file='/etc/ebs-pin.yaml'):
    """
    Config format:
       EBS-PIN-ID: uniq-id
       device: /dev/xvdf
       virtual_device: /dev/xvdf1 # quite different per OS/Instance type
       mount_dir: /data
       version: commenting...
       init_size: 20 #GB
    """
    if os.path.isfile(config_file):
        with open(config_file) as f:
            config = yaml.load(f)
        for key in [EBS_PIN_ID, DEVICE, MOUNT_DIR, VIRTUAL_DEVICE]:
            if not config.get(key):
                raise EBSPINConfigException("%s Must not be empty!" % key)
    else:
        raise EBSPINConfigException(
            "Could not find config file %s", config_file)
    facts = yaml.load(requests.get(
        'http://169.254.169.254/latest/dynamic/instance-identity/document', timeout=2).text)

    manager = EBSManager(logger=log,
                         id=config.get(EBS_PIN_ID),
                         device=config.get(DEVICE),
                         directory=config.get(MOUNT_DIR),
                         virtual_device=config.get(VIRTUAL_DEVICE),
                         init_size=config.get('init_size',20),
                         instance_id=facts.get('instanceId'),
                         region=facts.get('region'),
                         availability_zone=facts.get('availabilityZone'),
                         instance_type=facts.get('instanceType')
                         )
    return manager


@click.group()
def cli():
    """EBS PIN v2"""
    pass


@cli.command("attach")
@click_log.simple_verbosity_option(log)
def attach():
    """Initiallize or attach volume by configuration
    """
    manager=get_manager()
    manager.attach_volume()

@cli.command("snapshot")
@click_log.simple_verbosity_option(log)
@click.option('--no-wait', is_flag=True)
@click.option('--no-cleanup', is_flag=True)
def snapshot(no_wait, no_cleanup):
    """Take a snapshot NOW for the currently mounted volume"""
    manager=get_manager()
    manager.create_snapshot(wait=not no_wait, cleanup=not no_cleanup)

if __name__ == '__main__':
    cli()
